* Vim
  1. vab(B) vat 圆括号 花括号 尖括号(brackets)
  2. :r filename  # read other file to current buffer
  3. :r !date     # execute shell command
  4. :e!          #
  5. :mess        # show message vim
  6. :scriptnames # check load xxx.vim
  7.

* ; repeat last search  . repeat the last action
* use "b yy  and "b p to paste
* caw0:00:00 （change word ）进入了插入模式
* x  # 删除光标后的单个字符
* X  # 删除光标前的单个字符
* c$ # 删除本行光标后的所有内容，并且进入插入模式；
* c0   # same up
* w e b # 进行单词间的移动（web）
* di” # 删除双引号里面的内容
* ci“ 在 di” 的基础上并且进入插入状态 # (chang inside )  复制的话，可以把 c 改为 y ;
* ya” # 包括符号一起复制
* J # 将下一行的内容合并到当前行，并且加一个空格 gJ  合并两行，但是不加空格
* gg=G # align all text
* == # align this line
* '#' # 将光标放在想要搜索的字符串上,#键,然后 n 进进行查找,一般是一串文字
* :x   #   == :wq   保存退出
* :%s /old/new /g   # 对所有的 old 替换为 new ,    默认是替换本行的第一个 old 关键字,如果想要实现整行替换,加上参数/g, %是范围 当前文件
* :2s /old/new /g      # 对第二行的内容进行替换
* :2,22s /old/new /g      # 对第二行的内容进行替换
* :sp   #  上下分屏,一样的屏幕
* CTRL ww   # 窗口切换
* vimdiff file_name1 file_name2 # 比较两个文件的区别
* yfa    #  复制 到本行的第一个 a 字符,find    y2fa     第二个 a
* gUw guw gue  ~  gUG gUU guu  g~~ gu0 gu$
* guaw # up case
* zfip zd zf # fold code block and we can use 'l' to show this code block
* alt o # open a new line in inserted mode
* ctrl w # delete a word in inserted mode
* ctrl u # delete contents of before this cursor

### Macro
- qd.....q # the second 'q' is end this macro's recording. this location can be 0-9 and a-z. called register.
- <number>@d # wake this macro 'd'
- @@ # wake up last macro.

### Wait
* vim -u NONE <-N> # use original's vim man vim
* vim -u /path/demo.vim # execute this ....vim
* f{char} # jump quickly.
* vap :normal . # visual operate current text
* :scriptnames # show all load demo.vim
* :colorscheme <TAB> # show all theme_vim
* C-a C-x  # add or sub  number
* q: # show history
* `g/^\s*$/d` # delete all white_line
* %TOhtml # to html
### Spell
* set spell set nospell
* <C-x>s or <C-x><C-s>
* zg # add word directory
* zw # delete this word
* [s jump the spell error or ]s
* C-p trier autocomplete
* C-e # original

## Spacevim
* space b N n   # creat new buffer
* space t h s # shut or turn on hightlight color
* space t n # show or hide number
* space b p # return last buffer
* space b f # format code
* C-o # jump last cursor location
* leader   nu # switch window
* space tab # quickly switch buffer
* shift tab  # 切换文件树与 buffer
* space ; 4 j # 向当前光标注释下面的内容 4 行
* space ; space   # 在当前光标添加注释
* space c s   # 完美注释   就是无论当前光标在那个位置,注释掉当前行
* spc f v d    //编辑配置文件 file vim
* spc h l   // 查看启用的模块
* spc  s c   // 取消高亮搜索
* s Q   //关闭当前的窗口
* sq    //关闭当前的缓冲区
* s o   //关闭其他所有窗口
* spc  w =    //整理窗口
* sv   //左右分屏
* sg  //上下分屏
  * spc w r    //切换窗口
* spc b N    (hjkl)     //建立一个新的缓冲区 buffer
  * spc jk    //跳转下一行，并且对其该行
  * spc   jn    // 在光标处进行回车
  * spc l r   // 运行程序
  - spc i l s # insert lorem
  - F7 # undo tree
  - spc i l l # insert lorem
  - [ pace # new line in the up line

### Path
  - .vim/autoload/spacevim.vim  # configure
  - .vim/bundle/xxx.vim or folder # plugin
####  Nerdtree
  - x # 关闭当前目录所在的父目录
  - p # jump the pareent directory
  - K # jump  the first node int the current file
  - J # jump the last node in the current directory
  * m # menu
  * U # jump up_directory
  * space b d
  * space b m

### Web
  [help](http://vimcdoc.sourceforge.net/doc/)



* Emacs (spacemacs)
** C-z # switch vim
** vim.(hjkl) == emacs.(C-f C-b C-p C-n)
** C-k(d$) C-u(dd) C-a(I) C-e(A)
** C-x u or C-/(u)
** C-g C-x u (reundo)
** C-x C-c (quit emacs)
** alt(M) f/b (word jump)
** alt-x(command extend)
** C-g(ESC)
* C-d(x) alt-d(X)
* C-x C-f (find file)
* C-x C-b (list all buffer)
* C-x s (save all bufer)
* C-s (I-search) and C-s again to jump next word
* C-c (move cursor to this current line)

  WS == Whitespace
- WS c y # comment this line and paste this line to next line
- space tab # swich buffer
- space nu  # swich window
- [emacs-tutorial](https://www.douban.com/note/706407786/)
- WS WS = M-x
- WS b n # jump to next buffer.
- WS b h # jump to the home buffer.
- WS tab # quickly to jump the last buffer.
- WS j = # align this all text.
- WS t 8 # highlight to show 80'
- WS t f # show this column
- WS l b # show all buffers
- gcc # annotaion
- WS p t # lolcation this current file in the direction.
- WS " # popup a window terminal.
- WS j j # quickly to jump you want go
- WS j l # jump some line
- TAB # path automatically popup
- WS ' # shell popup
- WS w x  # kill buffer and window
- C-x C-c # exit this emacs
- emacs -q --eval='(message "%s" (emacs-init-time))'  # start time
- emacs -Q -nw # use no-configed/original emacs
- http://www.lisperati.com/casting-spels-emacs/html/casting-spels-emacs-3.html

### new
- if we want to use this <tab> to indent, we can use C-q to add prefix and hit this <tab>
- or we can use M-i to come true this function.
- space a u # show undo tree history like undo-tree.

WS c C #
:gdb

WS f R # rename
WS s c # del highlight
WS f E # use sudo to edit file
WS b b
space b d # close buffer

space w m # funscreen
space i s # insert snipts
zs # fold code
space h d (f k m v )
space f e R # reload configuration


** Vim
- ctrl+j  # next line 
- ctrl+h  # backspace in insert
- ctrl+h  # back in normal
- ctrl+p  # in insert, autocomplete
- ctrl+t  # add indent in insert
- ctrl+d  # decrease indent in insert
